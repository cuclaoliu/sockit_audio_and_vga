// --------------------------------------------------------------------
// Copyright (c) 2013 by Terasic Technologies Inc.
// --------------------------------------------------------------------
//
// Permission:
//
//   Terasic grants permission to use and modify this code for use
//   in synthesis for all Terasic Development Boards and Altera Development 
//   Kits made by Terasic.  Other use of this code, including the selling 
//   ,duplication, or modification of any portion is strictly prohibited.
//
// Disclaimer:
//
//   This VHDL/Verilog or C/C++ source code is intended as a design reference
//   which illustrates how these types of functions can be implemented.
//   It is the user's responsibility to verify their design for
//   consistency and functionality through the use of formal
//   verification methods.  Terasic provides no warranty regarding the use 
//   or functionality of this code.
//
// --------------------------------------------------------------------
//           
//                     Terasic Technologies Inc
//                     356 Fu-Shin E. Rd Sec. 1. JhuBei City,
//                     HsinChu County, Taiwan
//                     302
//
//                     web: http://www.terasic.com/
//                     email: support@terasic.com
//
// --------------------------------------------------------------------

/*
 * Function:
 *      Audio record and Play
 * 
 * Human Machine Interface:
 *      KEY3: Record Start/Stop (Auto Stop when buffer is full)
 *      KEY2: Play Start/Stop (Audo Stop when no data to play)
 *      LED3: light when recording
 *      LED2: light when playing
 *      SW0:  Audio Source Selection: DOWN-->MIC, UP-->LINE-IN
 *      SW3/SW2/SW1: Sample Rate Control:
 *                    DOWN/DOWN/DOWN-->96K 
 *                    DOWN/DOWN/UP->48K,
 *                    DOWN/UP/DOWN->44.1K, 
 *                    DOWN/UP/UP->32K,
 *                    UP/DOWN/DOWN->8K
 * 
 * CONFIGURATION:
 *      DDR3: used to store record audio signal
 *      ONCHIP_MEMORY: used to store Nios II program
 * 
 * Revision:
 *      V1.0, 11/21/2007, init by Richard.
 *      V1.01 21/5 /2010  
 * 
 * Compatibility:
 *      Quartus 13.0
 *      SoCKit Board
 */

#include <math.h>

#include "includes.h"
#include "audio.h"
#include "led.h"
#include <math.h>

#ifdef DEBUG_APP
    #define APP_DEBUG(x)    DEBUG(x)
#else
    #define APP_DEBUG(x)
#endif


///////////////////////////////////////////////////////////////////////////////
//////////// Internal function prototype & data structure /////////////////////
///////////////////////////////////////////////////////////////////////////////
//================= internal function prototype & data structure definit =====
#define RECORD_BUTTON   0x08
#define PLAY_BUTTON     0x04
#define PLAYRING_BUTTON 0x02
#define RECORD_BLOCK_SIZE   250    // ADC FIFO: 512 byte
#define PLAY_BLOCK_SIZE     250    // DAC FIFO: 512 byte
#define MAX_TRY_CNT         1024
#define LINEOUT_DEFUALT_VOL 0x79  // 0 dB
#define PI				3.1415926
#define SINE_WAVE_LENGTH	1024
#define SCALE_FAC			16384
#define USE_DDR3_FOR_DATA


#ifndef USE_DDR3_FOR_DATA
    #define BUF_SAMPLE_NUM     (96000*5)  // 5 second @ 96K
#endif 


typedef enum{
    MIC_RECORD,
    LINEIN_RECORD,
    LINEOUT_PLAY
}AUDIO_FUNC;

void button_monitor_isr(void* context, alt_u32 id);
bool button_monitor_start(volatile alt_u32 *pPressedMask);
bool init_audio(AUDIO_FUNC audio_func);
alt_u32 display_time_elapsed(alt_u32 sample_num);

// ui config
bool ui_is_mic_record(void);
int  ui_get_sample_rate(void);

// gloal variable
int record_sample_rate;

///////////////////////////////////////////////////////////////////////////////
//////////// Internal function implement(body) ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
bool ui_is_mic_record(void){
    bool bMicRecord;
    bMicRecord = (IORD(PIO_SW_BASE, 0) & 0x01)?FALSE:TRUE;
    return bMicRecord;
}

int ui_get_sample_rate(void){
    int sample_rate = 96000;
    alt_u32 mask;
    mask = IORD(PIO_SW_BASE, 0);
    mask = (mask >> 1) & 0x07;
    if (mask == 1)
        sample_rate = 48000;
    else if (mask == 2)
        sample_rate = 44100;
    else if (mask == 3)
        sample_rate = 32000;
    else if (mask == 4)
        sample_rate = 8000;
    return sample_rate;
}

void button_monitor_isr(void* context, alt_u32 id){
    volatile alt_u32* pPressedMask = (volatile alt_u32*)context;
    *pPressedMask |= IORD_ALTERA_AVALON_PIO_EDGE_CAP(PIO_KEY_BASE) & 0x0F;  // 4-button

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_KEY_BASE,0);
}

bool button_monitor_start(volatile alt_u32 *pPressedMask){
    bool bSuccess = TRUE;
    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(PIO_KEY_BASE, 0x0F); // 4-button

    // Reset the edge catpure register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(PIO_KEY_BASE,0);

    // register IRQ
    if (bSuccess && (alt_irq_register(PIO_KEY_IRQ, (void *)pPressedMask, button_monitor_isr) != 0)){
        printf("[SW-MONITOR]register button IRQ fail\r\n");
        bSuccess = FALSE;
    }

    return bSuccess;
}


bool init_audio(AUDIO_FUNC audio_func){
    bool bSuccess = TRUE;
    AUDIO_InterfaceActive(FALSE);
    //
    if (audio_func == MIC_RECORD){
        AUDIO_SetInputSource(SOURCE_MIC);
        AUDIO_DacEnableSoftMute(TRUE);
        AUDIO_AdcEnableHighPassFilter(FALSE);
        AUDIO_MicMute(FALSE);
        AUDIO_LineInMute(TRUE);
    }else if (audio_func == LINEIN_RECORD){
        AUDIO_SetInputSource(SOURCE_LINEIN);
        AUDIO_DacEnableSoftMute(TRUE);
        AUDIO_AdcEnableHighPassFilter(FALSE);
        AUDIO_MicMute(TRUE);
        AUDIO_LineInMute(FALSE);
        AUDIO_SetLineInVol(0x17, 0x17);  // max 0x1F, min:0; 0x17: 0dB (assume max input is 2.0v rms)
    }else if (audio_func == LINEOUT_PLAY){
        AUDIO_DacEnableSoftMute(TRUE);
        AUDIO_MicMute(TRUE);
        AUDIO_LineInMute(FALSE);
        AUDIO_DacEnableSoftMute(FALSE);
        //AUDIO_DacDeemphasisControl(DEEMPHASIS_48K);
        AUDIO_SetLineOutVol(LINEOUT_DEFUALT_VOL, LINEOUT_DEFUALT_VOL); // max 7F, min: 30, 0x79: 0 db
        AUDIO_DacEnableSoftMute(FALSE);
    }
    
    if (record_sample_rate == 8000)
        AUDIO_SetSampleRate(RATE_ADC8K_DAC8K);
    else if (record_sample_rate == 32000)
        AUDIO_SetSampleRate(RATE_ADC32K_DAC32K);
    else if (record_sample_rate == 48000)
        AUDIO_SetSampleRate(RATE_ADC48K_DAC48K);
    else if (record_sample_rate == 44100)
        AUDIO_SetSampleRate(RATE_ADC44K1_DAC44K1);
    else    
        AUDIO_SetSampleRate(RATE_ADC96K_DAC96K);
    //
    AUDIO_InterfaceActive(TRUE);
    
    return bSuccess;             
}


alt_u32 display_time_elapsed(alt_u32 sample_num){
    // assume sample rate is 48K
    alt_u32 time;
    time = sample_num * 100 / record_sample_rate;
    return time;
}


void dump_record_data(alt_u32 *pData, alt_u32 len){
    short sample_l, sample_r, sample_max = 0;
    alt_u32 data;
    int i;
    //return ;
    for(i=0;i<len;i++){
        data = *pData++;
        sample_l = (short)((data >> 16) & 0xFFFF);
        sample_r = (short)(data & 0xFFFF);
        //printf("[%d]%d/%d\n", i, sample_l, sample_r);
        if (sample_l > 0 && sample_max <  sample_l)
            sample_max = sample_l;
        if (sample_l < 0 && sample_max <  -sample_l)
            sample_max = -sample_l;
        if (sample_r > 0 && sample_max <  sample_r)
            sample_max = sample_r;
        if (sample_r < 0 && sample_max <  -sample_r)
            sample_max = -sample_r;
    }
    printf("max=%d\n\n", sample_max);
}


const char szMenu[][128] = {
    "======== Terasic Audio Demo [04/10/2013]==========\n",
    "operation guide:\n",
    "  KEY3: Record Start/Stop (Auto Stop when buffer is full)\n",
    "  KEY2: Play Start/Stop (Auto Stop when no data to play)\n",
    "  LED3: light when recording\n",
    "  LED2: light when playing\n",
    "  SW0:  Audio Source Selection. DOWN-->MIC, UP-->LINE-IN\n",
    "  SW3/SW2/SW1: Sample Rate Control.\n",
    "               DOWN/DOWN/DOWN-->96K\n",
    "               DOWN/DOWN/UP---->48K\n",
    "               DOWN/UP/DOWN---->44.1K\n",
    "               DOWN/UP/UP------>32K\n",
    "               UP/DOWN/DOWN---->8K\n",
    "\n\n"
};

void show_menu(void){
    int i;
    for(i=0;i<sizeof(szMenu)/sizeof(szMenu[0]);i++)
        printf(szMenu[i]);
}
typedef enum{
    ST_STANDY,
    ST_RECODING,
    ST_PLAYING
}STATE;

int main()
{
    STATE state = ST_STANDY;
    volatile alt_u32 button_mask=0;
    bool bRecordPressed, bPlayPressed, bError = FALSE;
    alt_u32 *pPlaying, *pRecording, RecordLen, PlayLen, data = 0, try_cnt = 0, buf_sample_size = 0;
    alt_u16 *pBuf;
    alt_u16 data, ch_right, ch_left;
    double MIN_RAD;
    double x = 0, y = 0;
    alt_u16 i = 0, step = 0;

    show_menu();
    LED_AllOff();
    printf("Welcome Audio Demo\n");

    // prepare
    AUDIO_Init();

#ifdef USE_DDR3_FOR_DATA
    pBuf = (alt_u16 *)DDR3_BASE;
    buf_sample_size = DDR3_SPAN/sizeof(alt_u32);
#else
    // alloc memory to stroe PCM data 
    buf_sample_size = BUF_SAMPLE_NUM;
    pBuf = malloc(buf_sample_size * sizeof(alt_u32));
    if (!pBuf){
        printf("malloc fail\r\n");
        return 0;
    }
#endif
    if (button_monitor_start(&button_mask)){  // button IRQ
    	printf("register key irq success.\r\n");
    }
    printf("ready\n\n");

    usleep(2000000);
    record_sample_rate = 96000;
    LED_Display(0xF);
    AUDIO_FifoClear();
    init_audio(LINEOUT_PLAY);
    AUDIO_REG_READ();
    printf("playing (sample rate = %d)...\r\n", record_sample_rate);
    MIN_RAD = 2.0 * PI / SINE_WAVE_LENGTH;
    for(int i=0; i < SINE_WAVE_LENGTH; i++){
		x = MIN_RAD * i;
		y = sin(x) * SCALE_FAC;
    	*(pBuf + i) = y;
    }
    step = 2;
    i = 0;
    // infinite loop
    while(1){
		if (AUDIO_DacFifoNotFull()){
			data = *(pBuf+i);
			ch_left = data;
			ch_right = data;
			//printf("i: %d, x: %f, y: %f, and data: %d\r\n", i, x, y, data);
			AUDIO_DacFifoSetData(ch_left, ch_right);
			i += step;
			if (i >= SINE_WAVE_LENGTH)
				i -= SINE_WAVE_LENGTH;
		}
    }
    
}
    
